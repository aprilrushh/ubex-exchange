{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/components/Chart/SimpleChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as LightweightCharts from 'lightweight-charts';\nimport './SimpleChart.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SimpleChart = ({\n  data = [],\n  type = 'candle',\n  timeframe = '1D',\n  symbol = 'BTC/KRW',\n  chartHeight = 400\n}) => {\n  _s();\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const resizeObserver = useRef(null);\n\n  // 차트 데이터 생성 (예시 데이터 - 실제 데이터가 없을 경우)\n  const generateDummyData = () => {\n    const now = new Date();\n    const result = [];\n    const basePrice = 144000000; // 기본 가격 (BTC/KRW 예시)\n    let prevClose = basePrice;\n\n    // 타임프레임에 따라 데이터 포인트 수와 간격 결정\n    const getTimeConfig = () => {\n      switch (timeframe) {\n        case '30m':\n          return {\n            count: 48,\n            interval: 30 * 60 * 1000,\n            unit: 'minute'\n          };\n        case '1H':\n          return {\n            count: 24,\n            interval: 60 * 60 * 1000,\n            unit: 'hour'\n          };\n        case '4H':\n          return {\n            count: 36,\n            interval: 4 * 60 * 60 * 1000,\n            unit: 'hour'\n          };\n        case '1D':\n          return {\n            count: 30,\n            interval: 24 * 60 * 60 * 1000,\n            unit: 'day'\n          };\n        case '1W':\n          return {\n            count: 30,\n            interval: 7 * 24 * 60 * 60 * 1000,\n            unit: 'week'\n          };\n        case '1M':\n          return {\n            count: 24,\n            interval: 30 * 24 * 60 * 60 * 1000,\n            unit: 'month'\n          };\n        default:\n          return {\n            count: 30,\n            interval: 24 * 60 * 60 * 1000,\n            unit: 'day'\n          };\n      }\n    };\n    const {\n      count,\n      interval,\n      unit\n    } = getTimeConfig();\n    for (let i = count - 1; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * interval);\n      const randomFactor = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * randomFactor;\n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 1000 + 100);\n      result.push({\n        time: time.getTime() / 1000,\n        open,\n        high,\n        low,\n        close,\n        volume\n      });\n      prevClose = close;\n    }\n    return result;\n  };\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n\n    // 기존 차트 제거\n    if (chartRef.current) {\n      chartRef.current.remove();\n      chartRef.current = null;\n    }\n    const chartData = data.length > 0 ? data : generateDummyData();\n\n    // 차트 생성\n    const chart = LightweightCharts.createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: chartHeight,\n      layout: {\n        background: {\n          type: LightweightCharts.ColorType.Solid,\n          color: '#ffffff'\n        },\n        textColor: '#333'\n      },\n      grid: {\n        vertLines: {\n          color: '#f0f0f0'\n        },\n        horzLines: {\n          color: '#f0f0f0'\n        }\n      },\n      crosshair: {\n        mode: 1\n      },\n      rightPriceScale: {\n        borderColor: '#f0f0f0'\n      },\n      timeScale: {\n        borderColor: '#f0f0f0',\n        timeVisible: true,\n        secondsVisible: false\n      }\n    });\n\n    // 다크 모드 감지 및 적용\n    const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    if (isDarkMode || document.body.classList.contains('dark')) {\n      chart.applyOptions({\n        layout: {\n          background: {\n            type: LightweightCharts.ColorType.Solid,\n            color: '#1e2233'\n          },\n          textColor: '#e9ecef'\n        },\n        grid: {\n          vertLines: {\n            color: '#242836'\n          },\n          horzLines: {\n            color: '#242836'\n          }\n        }\n      });\n    }\n\n    // 시리즈 추가 (캔들스틱 또는 라인)\n    let mainSeries;\n    if (type === 'candle') {\n      mainSeries = chart.addCandlestickSeries({\n        upColor: '#f75467',\n        downColor: '#0062df',\n        borderVisible: false,\n        wickUpColor: '#f75467',\n        wickDownColor: '#0062df'\n      });\n    } else {\n      mainSeries = chart.addAreaSeries({\n        lineColor: '#2196F3',\n        topColor: 'rgba(33, 150, 243, 0.4)',\n        bottomColor: 'rgba(33, 150, 243, 0.0)',\n        lineWidth: 2\n      });\n    }\n\n    // 데이터 설정\n    mainSeries.setData(chartData);\n\n    // 거래량 시리즈 추가 (선택적)\n    const volumeSeries = chart.addHistogramSeries({\n      color: '#26a69a',\n      priceFormat: {\n        type: 'volume'\n      },\n      priceScaleId: '',\n      // 별도 스케일 사용 안 함\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0\n      }\n    });\n\n    // 거래량 데이터 설정 (상승/하락에 따라 색상 변경)\n    const volumeData = chartData.map(item => ({\n      time: item.time,\n      value: item.volume,\n      color: item.close >= item.open ? 'rgba(247, 84, 103, 0.3)' : 'rgba(0, 98, 223, 0.3)'\n    }));\n    volumeSeries.setData(volumeData);\n\n    // 이동평균선 추가 (MA5, MA20)\n    const calculateMA = (data, period) => {\n      const result = [];\n      for (let i = 0; i < data.length; i++) {\n        if (i < period - 1) {\n          continue; // 초기 데이터는 건너뜀\n        }\n        let sum = 0;\n        for (let j = 0; j < period; j++) {\n          sum += data[i - j].close;\n        }\n        result.push({\n          time: data[i].time,\n          value: sum / period\n        });\n      }\n      return result;\n    };\n    const ma5Series = chart.addLineSeries({\n      color: '#f6b93b',\n      lineWidth: 1.5,\n      title: 'MA5'\n    });\n    const ma20Series = chart.addLineSeries({\n      color: '#8e44ad',\n      lineWidth: 1.5,\n      title: 'MA20'\n    });\n    const ma5Data = calculateMA(chartData, 5);\n    const ma20Data = calculateMA(chartData, 20);\n    if (ma5Data.length > 0) {\n      ma5Series.setData(ma5Data);\n    }\n    if (ma20Data.length > 0) {\n      ma20Series.setData(ma20Data);\n    }\n\n    // 마커 추가 (현재가 표시)\n    const currentPrice = chartData[chartData.length - 1].close;\n    mainSeries.createPriceLine({\n      price: currentPrice,\n      color: '#ff8f00',\n      lineWidth: 1,\n      lineStyle: 2,\n      // 점선\n      axisLabelVisible: true,\n      title: '현재가'\n    });\n\n    // Resize 이벤트 처리\n    const handleResize = () => {\n      if (chartRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth\n        });\n      }\n    };\n    resizeObserver.current = new ResizeObserver(handleResize);\n    resizeObserver.current.observe(chartContainerRef.current);\n    chartRef.current = chart;\n    return () => {\n      if (resizeObserver.current) {\n        resizeObserver.current.disconnect();\n      }\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n      }\n    };\n  }, [data, type, timeframe, symbol, chartHeight]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"simple-chart-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chart-wrapper\",\n      ref: chartContainerRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n_s(SimpleChart, \"0fCk24YN/j8jsSxO/rVbP4OEs1w=\");\n_c = SimpleChart;\nexport default SimpleChart;\nvar _c;\n$RefreshReg$(_c, \"SimpleChart\");","map":{"version":3,"names":["React","useRef","useEffect","useState","LightweightCharts","jsxDEV","_jsxDEV","SimpleChart","data","type","timeframe","symbol","chartHeight","_s","chartContainerRef","chartRef","resizeObserver","generateDummyData","now","Date","result","basePrice","prevClose","getTimeConfig","count","interval","unit","i","time","getTime","randomFactor","Math","random","change","open","close","round","high","max","low","min","volume","push","current","remove","chartData","length","chart","createChart","width","clientWidth","height","layout","background","ColorType","Solid","color","textColor","grid","vertLines","horzLines","crosshair","mode","rightPriceScale","borderColor","timeScale","timeVisible","secondsVisible","isDarkMode","window","matchMedia","matches","document","body","classList","contains","applyOptions","mainSeries","addCandlestickSeries","upColor","downColor","borderVisible","wickUpColor","wickDownColor","addAreaSeries","lineColor","topColor","bottomColor","lineWidth","setData","volumeSeries","addHistogramSeries","priceFormat","priceScaleId","scaleMargins","top","bottom","volumeData","map","item","value","calculateMA","period","sum","j","ma5Series","addLineSeries","title","ma20Series","ma5Data","ma20Data","currentPrice","createPriceLine","price","lineStyle","axisLabelVisible","handleResize","ResizeObserver","observe","disconnect","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/components/Chart/SimpleChart.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\nimport * as LightweightCharts from 'lightweight-charts';\nimport './SimpleChart.css';\n\nconst SimpleChart = ({ \n  data = [], \n  type = 'candle', \n  timeframe = '1D', \n  symbol = 'BTC/KRW',\n  chartHeight = 400\n}) => {\n  const chartContainerRef = useRef(null);\n  const chartRef = useRef(null);\n  const resizeObserver = useRef(null);\n\n  // 차트 데이터 생성 (예시 데이터 - 실제 데이터가 없을 경우)\n  const generateDummyData = () => {\n    const now = new Date();\n    const result = [];\n    const basePrice = 144000000; // 기본 가격 (BTC/KRW 예시)\n    let prevClose = basePrice;\n    \n    // 타임프레임에 따라 데이터 포인트 수와 간격 결정\n    const getTimeConfig = () => {\n      switch (timeframe) {\n        case '30m': return { count: 48, interval: 30 * 60 * 1000, unit: 'minute' };\n        case '1H': return { count: 24, interval: 60 * 60 * 1000, unit: 'hour' };\n        case '4H': return { count: 36, interval: 4 * 60 * 60 * 1000, unit: 'hour' };\n        case '1D': return { count: 30, interval: 24 * 60 * 60 * 1000, unit: 'day' };\n        case '1W': return { count: 30, interval: 7 * 24 * 60 * 60 * 1000, unit: 'week' };\n        case '1M': return { count: 24, interval: 30 * 24 * 60 * 60 * 1000, unit: 'month' };\n        default: return { count: 30, interval: 24 * 60 * 60 * 1000, unit: 'day' };\n      }\n    };\n    \n    const { count, interval, unit } = getTimeConfig();\n    \n    for (let i = count - 1; i >= 0; i--) {\n      const time = new Date(now.getTime() - (i * interval));\n      const randomFactor = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * randomFactor;\n      \n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 1000 + 100);\n      \n      result.push({\n        time: time.getTime() / 1000,\n        open,\n        high,\n        low,\n        close,\n        volume\n      });\n      \n      prevClose = close;\n    }\n    \n    return result;\n  };\n\n  useEffect(() => {\n    if (!chartContainerRef.current) return;\n    \n    // 기존 차트 제거\n    if (chartRef.current) {\n      chartRef.current.remove();\n      chartRef.current = null;\n    }\n    \n    const chartData = data.length > 0 ? data : generateDummyData();\n    \n    // 차트 생성\n    const chart = LightweightCharts.createChart(chartContainerRef.current, {\n      width: chartContainerRef.current.clientWidth,\n      height: chartHeight,\n      layout: {\n        background: { type: LightweightCharts.ColorType.Solid, color: '#ffffff' },\n        textColor: '#333',\n      },\n      grid: {\n        vertLines: { color: '#f0f0f0' },\n        horzLines: { color: '#f0f0f0' },\n      },\n      crosshair: {\n        mode: 1,\n      },\n      rightPriceScale: {\n        borderColor: '#f0f0f0',\n      },\n      timeScale: {\n        borderColor: '#f0f0f0',\n        timeVisible: true,\n        secondsVisible: false,\n      },\n    });\n    \n    // 다크 모드 감지 및 적용\n    const isDarkMode = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    if (isDarkMode || document.body.classList.contains('dark')) {\n      chart.applyOptions({\n        layout: {\n          background: { type: LightweightCharts.ColorType.Solid, color: '#1e2233' },\n          textColor: '#e9ecef',\n        },\n        grid: {\n          vertLines: { color: '#242836' },\n          horzLines: { color: '#242836' },\n        },\n      });\n    }\n    \n    // 시리즈 추가 (캔들스틱 또는 라인)\n    let mainSeries;\n    if (type === 'candle') {\n      mainSeries = chart.addCandlestickSeries({\n        upColor: '#f75467',\n        downColor: '#0062df',\n        borderVisible: false,\n        wickUpColor: '#f75467',\n        wickDownColor: '#0062df',\n      });\n    } else {\n      mainSeries = chart.addAreaSeries({\n        lineColor: '#2196F3',\n        topColor: 'rgba(33, 150, 243, 0.4)',\n        bottomColor: 'rgba(33, 150, 243, 0.0)',\n        lineWidth: 2,\n      });\n    }\n    \n    // 데이터 설정\n    mainSeries.setData(chartData);\n    \n    // 거래량 시리즈 추가 (선택적)\n    const volumeSeries = chart.addHistogramSeries({\n      color: '#26a69a',\n      priceFormat: {\n        type: 'volume',\n      },\n      priceScaleId: '', // 별도 스케일 사용 안 함\n      scaleMargins: {\n        top: 0.8,\n        bottom: 0,\n      },\n    });\n    \n    // 거래량 데이터 설정 (상승/하락에 따라 색상 변경)\n    const volumeData = chartData.map(item => ({\n      time: item.time,\n      value: item.volume,\n      color: item.close >= item.open ? 'rgba(247, 84, 103, 0.3)' : 'rgba(0, 98, 223, 0.3)',\n    }));\n    \n    volumeSeries.setData(volumeData);\n    \n    // 이동평균선 추가 (MA5, MA20)\n    const calculateMA = (data, period) => {\n      const result = [];\n      \n      for (let i = 0; i < data.length; i++) {\n        if (i < period - 1) {\n          continue; // 초기 데이터는 건너뜀\n        }\n        \n        let sum = 0;\n        for (let j = 0; j < period; j++) {\n          sum += data[i - j].close;\n        }\n        \n        result.push({\n          time: data[i].time,\n          value: sum / period,\n        });\n      }\n      \n      return result;\n    };\n    \n    const ma5Series = chart.addLineSeries({\n      color: '#f6b93b',\n      lineWidth: 1.5,\n      title: 'MA5',\n    });\n    \n    const ma20Series = chart.addLineSeries({\n      color: '#8e44ad',\n      lineWidth: 1.5,\n      title: 'MA20',\n    });\n    \n    const ma5Data = calculateMA(chartData, 5);\n    const ma20Data = calculateMA(chartData, 20);\n    \n    if (ma5Data.length > 0) {\n      ma5Series.setData(ma5Data);\n    }\n    \n    if (ma20Data.length > 0) {\n      ma20Series.setData(ma20Data);\n    }\n    \n    // 마커 추가 (현재가 표시)\n    const currentPrice = chartData[chartData.length - 1].close;\n    \n    mainSeries.createPriceLine({\n      price: currentPrice,\n      color: '#ff8f00',\n      lineWidth: 1,\n      lineStyle: 2, // 점선\n      axisLabelVisible: true,\n      title: '현재가',\n    });\n    \n    // Resize 이벤트 처리\n    const handleResize = () => {\n      if (chartRef.current) {\n        chartRef.current.applyOptions({\n          width: chartContainerRef.current.clientWidth,\n        });\n      }\n    };\n    \n    resizeObserver.current = new ResizeObserver(handleResize);\n    resizeObserver.current.observe(chartContainerRef.current);\n    \n    chartRef.current = chart;\n    \n    return () => {\n      if (resizeObserver.current) {\n        resizeObserver.current.disconnect();\n      }\n      if (chartRef.current) {\n        chartRef.current.remove();\n        chartRef.current = null;\n      }\n    };\n  }, [data, type, timeframe, symbol, chartHeight]);\n\n  return (\n    <div className=\"simple-chart-container\">\n      <div className=\"chart-wrapper\" ref={chartContainerRef}></div>\n    </div>\n  );\n};\n\nexport default SimpleChart;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}