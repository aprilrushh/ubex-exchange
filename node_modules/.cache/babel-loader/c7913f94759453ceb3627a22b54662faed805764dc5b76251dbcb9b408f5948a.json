{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/context/MarketContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// 시장 데이터 관련 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MarketContext = /*#__PURE__*/createContext();\nexport const MarketProvider = ({\n  children\n}) => {\n  _s();\n  // 코인 리스트 상태\n  const [coinList, setCoinList] = useState([]);\n  // 현재 선택된 코인 정보\n  const [currentCoin, setCurrentCoin] = useState(null);\n  // 시장 데이터 (가격, 거래량 등)\n  const [marketData, setMarketData] = useState(null);\n  // 차트 데이터\n  const [marketHistory, setMarketHistory] = useState([]);\n  // 로딩 상태\n  const [isLoading, setIsLoading] = useState(false);\n  // 에러 상태\n  const [error, setError] = useState(null);\n\n  // 시장 데이터 가져오기 (API 호출 대신 예시 데이터 사용)\n  const fetchMarketData = async symbol => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // 실제 API 호출 구현 시 여기에 구현\n      // const response = await fetch(`/api/market/${symbol}`);\n      // const data = await response.json();\n\n      // 예시 데이터 (BTC/KRW)\n      const exampleData = {\n        symbol: 'BTC/KRW',\n        price: 144313000,\n        high24h: 145186000,\n        low24h: 144037000,\n        volume24h: 1346.789,\n        volume24hKRW: 194600583627,\n        change24h: -651000,\n        changePercent24h: -0.45,\n        timestamp: new Date().toISOString()\n      };\n\n      // 차트 데이터 생성 (예시)\n      const historyData = generateExampleChartData(symbol);\n      setTimeout(() => {\n        setMarketData(exampleData);\n        setMarketHistory(historyData);\n        setIsLoading(false);\n      }, 500); // 실제 API 딜레이 시뮬레이션\n    } catch (err) {\n      console.error('Market data fetch error:', err);\n      setError('시장 데이터를 불러오는 데 실패했습니다.');\n      setIsLoading(false);\n    }\n  };\n\n  // 코인 리스트 가져오기 (API 호출 대신 예시 데이터 사용)\n  const fetchCoinList = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // 실제 API 호출 구현 시 여기에 구현\n      // const response = await fetch('/api/coins');\n      // const data = await response.json();\n\n      // 예시 데이터\n      const exampleCoins = [{\n        id: 'btc',\n        symbol: 'BTC',\n        market: 'KRW',\n        koreanName: '비트코인',\n        englishName: 'Bitcoin',\n        price: 144313000,\n        changePercent24h: -0.45,\n        change24h: -651000,\n        volume24hKRW: 194601000000,\n        isFavorite: false\n      }, {\n        id: 'xrp',\n        symbol: 'XRP',\n        market: 'KRW',\n        koreanName: '리플',\n        englishName: 'Ripple',\n        price: 3299,\n        changePercent24h: -3.45,\n        change24h: -118,\n        volume24hKRW: 593455000000,\n        isFavorite: false\n      }, {\n        id: 'doge',\n        symbol: 'DOGE',\n        market: 'KRW',\n        koreanName: '도지코인',\n        englishName: 'Dogecoin',\n        price: 323.9,\n        changePercent24h: -6.63,\n        change24h: -23,\n        volume24hKRW: 546612000000,\n        isFavorite: false\n      }, {\n        id: 'eth',\n        symbol: 'ETH',\n        market: 'KRW',\n        koreanName: '이더리움',\n        englishName: 'Ethereum',\n        price: 3474000,\n        changePercent24h: -2.88,\n        change24h: -103000,\n        volume24hKRW: 392052000000,\n        isFavorite: false\n      }, {\n        id: 'kaito',\n        symbol: 'KAITO',\n        market: 'KRW',\n        koreanName: '카이토',\n        englishName: 'Kaito',\n        price: 2407,\n        changePercent24h: -8.83,\n        change24h: -233,\n        volume24hKRW: 286094000000,\n        isFavorite: true\n      }, {\n        id: 'move',\n        symbol: 'MOVE',\n        market: 'KRW',\n        koreanName: '무브먼트',\n        englishName: 'Movement',\n        price: 316.3,\n        changePercent24h: 10.52,\n        change24h: 30.1,\n        volume24hKRW: 258020000000,\n        isFavorite: false\n      }, {\n        id: 'layer',\n        symbol: 'LAYER',\n        market: 'KRW',\n        koreanName: '레이어',\n        englishName: 'Layer',\n        price: 1667,\n        changePercent24h: -5.07,\n        change24h: -89,\n        volume24hKRW: 190725000000,\n        isFavorite: false\n      }, {\n        id: 'sol',\n        symbol: 'SOL',\n        market: 'KRW',\n        koreanName: '솔라나',\n        englishName: 'Solana',\n        price: 241800,\n        changePercent24h: -1.81,\n        change24h: -4450,\n        volume24hKRW: 164722000000,\n        isFavorite: true\n      }];\n      setTimeout(() => {\n        setCoinList(exampleCoins);\n        setIsLoading(false);\n      }, 300); // 실제 API 딜레이 시뮬레이션\n    } catch (err) {\n      console.error('Coin list fetch error:', err);\n      setError('코인 목록을 불러오는 데 실패했습니다.');\n      setIsLoading(false);\n    }\n  };\n\n  // 즐겨찾기 토글\n  const toggleFavorite = coinId => {\n    setCoinList(prevList => prevList.map(coin => coin.id === coinId ? {\n      ...coin,\n      isFavorite: !coin.isFavorite\n    } : coin));\n  };\n\n  // 차트 데이터 생성 (예시)\n  const generateExampleChartData = symbol => {\n    const now = new Date();\n    const result = [];\n    const basePrice = symbol.includes('BTC') ? 144000000 : symbol.includes('ETH') ? 3470000 : symbol.includes('XRP') ? 3300 : symbol.includes('DOGE') ? 324 : 5000;\n    let prevClose = basePrice;\n    for (let i = 29; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      const randomFactor = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * randomFactor;\n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 1000 + 100);\n      result.push({\n        time: time.getTime() / 1000,\n        open,\n        high,\n        low,\n        close,\n        volume\n      });\n      prevClose = close;\n    }\n    return result;\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    coinList,\n    currentCoin,\n    setCurrentCoin,\n    marketData,\n    marketHistory,\n    isLoading,\n    error,\n    fetchMarketData,\n    fetchCoinList,\n    toggleFavorite\n  };\n  return /*#__PURE__*/_jsxDEV(MarketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this);\n};\n_s(MarketProvider, \"O7Deoock354F9oNdBh9uCMD4Tj8=\");\n_c = MarketProvider;\nexport default MarketProvider;\nvar _c;\n$RefreshReg$(_c, \"MarketProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","MarketContext","MarketProvider","children","_s","coinList","setCoinList","currentCoin","setCurrentCoin","marketData","setMarketData","marketHistory","setMarketHistory","isLoading","setIsLoading","error","setError","fetchMarketData","symbol","exampleData","price","high24h","low24h","volume24h","volume24hKRW","change24h","changePercent24h","timestamp","Date","toISOString","historyData","generateExampleChartData","setTimeout","err","console","fetchCoinList","exampleCoins","id","market","koreanName","englishName","isFavorite","toggleFavorite","coinId","prevList","map","coin","now","result","basePrice","includes","prevClose","i","time","getTime","randomFactor","Math","random","change","open","close","round","high","max","low","min","volume","push","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/context/MarketContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// 시장 데이터 관련 컨텍스트 생성\nexport const MarketContext = createContext();\n\nexport const MarketProvider = ({ children }) => {\n  // 코인 리스트 상태\n  const [coinList, setCoinList] = useState([]);\n  // 현재 선택된 코인 정보\n  const [currentCoin, setCurrentCoin] = useState(null);\n  // 시장 데이터 (가격, 거래량 등)\n  const [marketData, setMarketData] = useState(null);\n  // 차트 데이터\n  const [marketHistory, setMarketHistory] = useState([]);\n  // 로딩 상태\n  const [isLoading, setIsLoading] = useState(false);\n  // 에러 상태\n  const [error, setError] = useState(null);\n\n  // 시장 데이터 가져오기 (API 호출 대신 예시 데이터 사용)\n  const fetchMarketData = async (symbol) => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // 실제 API 호출 구현 시 여기에 구현\n      // const response = await fetch(`/api/market/${symbol}`);\n      // const data = await response.json();\n      \n      // 예시 데이터 (BTC/KRW)\n      const exampleData = {\n        symbol: 'BTC/KRW',\n        price: 144313000,\n        high24h: 145186000,\n        low24h: 144037000,\n        volume24h: 1346.789,\n        volume24hKRW: 194600583627,\n        change24h: -651000,\n        changePercent24h: -0.45,\n        timestamp: new Date().toISOString()\n      };\n      \n      // 차트 데이터 생성 (예시)\n      const historyData = generateExampleChartData(symbol);\n      \n      setTimeout(() => {\n        setMarketData(exampleData);\n        setMarketHistory(historyData);\n        setIsLoading(false);\n      }, 500); // 실제 API 딜레이 시뮬레이션\n    } catch (err) {\n      console.error('Market data fetch error:', err);\n      setError('시장 데이터를 불러오는 데 실패했습니다.');\n      setIsLoading(false);\n    }\n  };\n\n  // 코인 리스트 가져오기 (API 호출 대신 예시 데이터 사용)\n  const fetchCoinList = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // 실제 API 호출 구현 시 여기에 구현\n      // const response = await fetch('/api/coins');\n      // const data = await response.json();\n      \n      // 예시 데이터\n      const exampleCoins = [\n        {\n          id: 'btc',\n          symbol: 'BTC',\n          market: 'KRW',\n          koreanName: '비트코인',\n          englishName: 'Bitcoin',\n          price: 144313000,\n          changePercent24h: -0.45,\n          change24h: -651000,\n          volume24hKRW: 194601000000,\n          isFavorite: false\n        },\n        {\n          id: 'xrp',\n          symbol: 'XRP',\n          market: 'KRW',\n          koreanName: '리플',\n          englishName: 'Ripple',\n          price: 3299,\n          changePercent24h: -3.45,\n          change24h: -118,\n          volume24hKRW: 593455000000,\n          isFavorite: false\n        },\n        {\n          id: 'doge',\n          symbol: 'DOGE',\n          market: 'KRW',\n          koreanName: '도지코인',\n          englishName: 'Dogecoin',\n          price: 323.9,\n          changePercent24h: -6.63,\n          change24h: -23,\n          volume24hKRW: 546612000000,\n          isFavorite: false\n        },\n        {\n          id: 'eth',\n          symbol: 'ETH',\n          market: 'KRW',\n          koreanName: '이더리움',\n          englishName: 'Ethereum',\n          price: 3474000,\n          changePercent24h: -2.88,\n          change24h: -103000,\n          volume24hKRW: 392052000000,\n          isFavorite: false\n        },\n        {\n          id: 'kaito',\n          symbol: 'KAITO',\n          market: 'KRW',\n          koreanName: '카이토',\n          englishName: 'Kaito',\n          price: 2407,\n          changePercent24h: -8.83,\n          change24h: -233,\n          volume24hKRW: 286094000000,\n          isFavorite: true\n        },\n        {\n          id: 'move',\n          symbol: 'MOVE',\n          market: 'KRW',\n          koreanName: '무브먼트',\n          englishName: 'Movement',\n          price: 316.3,\n          changePercent24h: 10.52,\n          change24h: 30.1,\n          volume24hKRW: 258020000000,\n          isFavorite: false\n        },\n        {\n          id: 'layer',\n          symbol: 'LAYER',\n          market: 'KRW',\n          koreanName: '레이어',\n          englishName: 'Layer',\n          price: 1667,\n          changePercent24h: -5.07,\n          change24h: -89,\n          volume24hKRW: 190725000000,\n          isFavorite: false\n        },\n        {\n          id: 'sol',\n          symbol: 'SOL',\n          market: 'KRW',\n          koreanName: '솔라나',\n          englishName: 'Solana',\n          price: 241800,\n          changePercent24h: -1.81,\n          change24h: -4450,\n          volume24hKRW: 164722000000,\n          isFavorite: true\n        }\n      ];\n      \n      setTimeout(() => {\n        setCoinList(exampleCoins);\n        setIsLoading(false);\n      }, 300); // 실제 API 딜레이 시뮬레이션\n    } catch (err) {\n      console.error('Coin list fetch error:', err);\n      setError('코인 목록을 불러오는 데 실패했습니다.');\n      setIsLoading(false);\n    }\n  };\n\n  // 즐겨찾기 토글\n  const toggleFavorite = (coinId) => {\n    setCoinList(prevList =>\n      prevList.map(coin =>\n        coin.id === coinId ? { ...coin, isFavorite: !coin.isFavorite } : coin\n      )\n    );\n  };\n\n  // 차트 데이터 생성 (예시)\n  const generateExampleChartData = (symbol) => {\n    const now = new Date();\n    const result = [];\n    const basePrice = symbol.includes('BTC') ? 144000000 : \n                     symbol.includes('ETH') ? 3470000 : \n                     symbol.includes('XRP') ? 3300 : \n                     symbol.includes('DOGE') ? 324 : 5000;\n    let prevClose = basePrice;\n    \n    for (let i = 29; i >= 0; i--) {\n      const time = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000));\n      const randomFactor = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * randomFactor;\n      \n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 1000 + 100);\n      \n      result.push({\n        time: time.getTime() / 1000,\n        open,\n        high,\n        low,\n        close,\n        volume\n      });\n      \n      prevClose = close;\n    }\n    \n    return result;\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    coinList,\n    currentCoin,\n    setCurrentCoin,\n    marketData,\n    marketHistory,\n    isLoading,\n    error,\n    fetchMarketData,\n    fetchCoinList,\n    toggleFavorite\n  };\n\n  return (\n    <MarketContext.Provider value={contextValue}>\n      {children}\n    </MarketContext.Provider>\n  );\n};\n\nexport default MarketProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}