{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/context/CryptoDataContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\n\n// 가상화폐 데이터 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const CryptoDataContext = /*#__PURE__*/createContext();\n\n// 컨텍스트 훅\nexport const useCryptoData = () => {\n  _s();\n  return useContext(CryptoDataContext);\n};\n_s(useCryptoData, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const CryptoDataProvider = ({\n  children\n}) => {\n  _s2();\n  // 코인 데이터 상태\n  const [cryptoData, setCryptoData] = useState({});\n\n  // 차트 데이터 가져오기 (더미 데이터 생성)\n  const getCandleData = async (symbol, timeframe) => {\n    // 실제 API 호출 대신 더미 데이터 생성\n    return generateDummyData(timeframe);\n  };\n\n  // 실시간 가격 가져오기 (더미 데이터)\n  const getRealtimePrice = async symbol => {\n    // 더미 데이터 반환\n    return {\n      price: 144313000,\n      change: -651000,\n      changePercent: -0.45\n    };\n  };\n\n  // 더미 데이터 생성 함수\n  const generateDummyData = range => {\n    const now = new Date();\n    const data = [];\n    const intervals = range === '1d' ? 24 : 30;\n    let basePrice = 144000000;\n    let prevClose = basePrice;\n    for (let i = 0; i < intervals; i++) {\n      const time = new Date(now);\n      if (range === '30m') time.setMinutes(time.getMinutes() - (intervals - i) * 30);else if (range === '1h') time.setHours(time.getHours() - (intervals - i));else if (range === '4h') time.setHours(time.getHours() - (intervals - i) * 4);else if (range === '1d') time.setDate(time.getDate() - (intervals - i));else if (range === '1w') time.setDate(time.getDate() - (intervals - i) * 7);else if (range === '1M') time.setMonth(time.getMonth() - (intervals - i));\n      const variance = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * variance;\n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 50000000 + 50000000);\n      data.push({\n        time: time.toISOString(),\n        timeLabel: time.toLocaleTimeString([], {\n          hour: '2-digit',\n          minute: '2-digit'\n        }),\n        dateLabel: time.toLocaleDateString(),\n        open,\n        high,\n        low,\n        close,\n        volume,\n        ma5: Math.round(basePrice * (1 + Math.sin(i * 0.2) * 0.02)),\n        ma20: Math.round(basePrice * (1 + Math.cos(i * 0.1) * 0.01))\n      });\n      prevClose = close;\n    }\n    return data;\n  };\n  return /*#__PURE__*/_jsxDEV(CryptoDataContext.Provider, {\n    value: {\n      cryptoData,\n      setCryptoData,\n      getCandleData,\n      getRealtimePrice\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s2(CryptoDataProvider, \"2CcnkHvuHdprVWoG/qlROZIMtm8=\");\n_c = CryptoDataProvider;\nvar _c;\n$RefreshReg$(_c, \"CryptoDataProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","CryptoDataContext","useCryptoData","_s","CryptoDataProvider","children","_s2","cryptoData","setCryptoData","getCandleData","symbol","timeframe","generateDummyData","getRealtimePrice","price","change","changePercent","range","now","Date","data","intervals","basePrice","prevClose","i","time","setMinutes","getMinutes","setHours","getHours","setDate","getDate","setMonth","getMonth","variance","Math","random","open","close","round","high","max","low","min","volume","push","toISOString","timeLabel","toLocaleTimeString","hour","minute","dateLabel","toLocaleDateString","ma5","sin","ma20","cos","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/context/CryptoDataContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\n// 가상화폐 데이터 컨텍스트 생성\nexport const CryptoDataContext = createContext();\n\n// 컨텍스트 훅\nexport const useCryptoData = () => useContext(CryptoDataContext);\n\nexport const CryptoDataProvider = ({ children }) => {\n  // 코인 데이터 상태\n  const [cryptoData, setCryptoData] = useState({});\n  \n  // 차트 데이터 가져오기 (더미 데이터 생성)\n  const getCandleData = async (symbol, timeframe) => {\n    // 실제 API 호출 대신 더미 데이터 생성\n    return generateDummyData(timeframe);\n  };\n  \n  // 실시간 가격 가져오기 (더미 데이터)\n  const getRealtimePrice = async (symbol) => {\n    // 더미 데이터 반환\n    return {\n      price: 144313000,\n      change: -651000,\n      changePercent: -0.45\n    };\n  };\n  \n  // 더미 데이터 생성 함수\n  const generateDummyData = (range) => {\n    const now = new Date();\n    const data = [];\n    const intervals = range === '1d' ? 24 : 30;\n    \n    let basePrice = 144000000;\n    let prevClose = basePrice;\n    \n    for (let i = 0; i < intervals; i++) {\n      const time = new Date(now);\n      \n      if (range === '30m') time.setMinutes(time.getMinutes() - (intervals - i) * 30);\n      else if (range === '1h') time.setHours(time.getHours() - (intervals - i));\n      else if (range === '4h') time.setHours(time.getHours() - (intervals - i) * 4);\n      else if (range === '1d') time.setDate(time.getDate() - (intervals - i));\n      else if (range === '1w') time.setDate(time.getDate() - (intervals - i) * 7);\n      else if (range === '1M') time.setMonth(time.getMonth() - (intervals - i));\n      \n      const variance = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * variance;\n      \n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 50000000 + 50000000);\n      \n      data.push({\n        time: time.toISOString(),\n        timeLabel: time.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),\n        dateLabel: time.toLocaleDateString(),\n        open,\n        high,\n        low,\n        close,\n        volume,\n        ma5: Math.round(basePrice * (1 + (Math.sin(i * 0.2) * 0.02))),\n        ma20: Math.round(basePrice * (1 + (Math.cos(i * 0.1) * 0.01)))\n      });\n      \n      prevClose = close;\n    }\n    \n    return data;\n  };\n\n  return (\n    <CryptoDataContext.Provider\n      value={{\n        cryptoData,\n        setCryptoData,\n        getCandleData,\n        getRealtimePrice\n      }}\n    >\n      {children}\n    </CryptoDataContext.Provider>\n  );\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}