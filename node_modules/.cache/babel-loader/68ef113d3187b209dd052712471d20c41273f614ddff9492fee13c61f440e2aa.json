{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/context/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\n\n// 인증 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  // 인증 상태\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  // 사용자 정보\n  const [user, setUser] = useState(null);\n  // 로딩 상태\n  const [loading, setLoading] = useState(false);\n  // 에러 상태\n  const [error, setError] = useState(null);\n\n  // 로그인\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // 실제 API 호출 대신 시뮬레이션\n      // const response = await fetch('/api/auth/login', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify({ email, password })\n      // });\n\n      // const data = await response.json();\n\n      // if (!response.ok) {\n      //   throw new Error(data.message || '로그인에 실패했습니다.');\n      // }\n\n      // 시뮬레이션을 위한 지연\n      await new Promise(resolve => setTimeout(resolve, 1000));\n\n      // 예시 사용자 데이터\n      const userData = {\n        id: 'user123',\n        email: email,\n        name: '사용자',\n        balance: {\n          KRW: 1000000,\n          BTC: 0.05,\n          ETH: 0.5\n        },\n        profileImage: '/images/profile.png'\n      };\n\n      // 상태 업데이트\n      setIsAuthenticated(true);\n      setUser(userData);\n\n      // 토큰 저장 (실제 구현 시)\n      // localStorage.setItem('token', data.token);\n\n      return {\n        success: true\n      };\n    } catch (err) {\n      setError(err.message || '로그인 중 오류가 발생했습니다.');\n      return {\n        success: false,\n        error: err.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 로그아웃\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n\n    // 토큰 제거 (실제 구현 시)\n    // localStorage.removeItem('token');\n\n    return true;\n  };\n\n  // 회원가입\n  const register = async (email, password, name) => {\n    setLoading(true);\n    setError(null);\n    try {\n      // 실제 API 호출 대신 시뮬레이션\n      // const response = await fetch('/api/auth/register', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify({ email, password, name })\n      // });\n\n      // const data = await response.json();\n\n      // if (!response.ok) {\n      //   throw new Error(data.message || '회원가입에 실패했습니다.');\n      // }\n\n      // 시뮬레이션을 위한 지연\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      return {\n        success: true\n      };\n    } catch (err) {\n      setError(err.message || '회원가입 중 오류가 발생했습니다.');\n      return {\n        success: false,\n        error: err.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 정보 가져오기\n  const fetchUserProfile = async () => {\n    setLoading(true);\n    try {\n      // 실제 API 호출 대신 시뮬레이션\n      // const token = localStorage.getItem('token');\n\n      // if (!token) {\n      //   throw new Error('인증 토큰이 없습니다.');\n      // }\n\n      // const response = await fetch('/api/auth/profile', {\n      //   headers: {\n      //     'Authorization': `Bearer ${token}`\n      //   }\n      // });\n\n      // const data = await response.json();\n\n      // if (!response.ok) {\n      //   throw new Error(data.message || '프로필을 불러오는데 실패했습니다.');\n      // }\n\n      // 시뮬레이션을 위한 지연\n      await new Promise(resolve => setTimeout(resolve, 500));\n\n      // 예시 사용자 데이터\n      const userData = {\n        id: 'user123',\n        email: 'user@example.com',\n        name: '사용자',\n        balance: {\n          KRW: 1000000,\n          BTC: 0.05,\n          ETH: 0.5\n        },\n        profileImage: '/images/profile.png'\n      };\n\n      // 상태 업데이트\n      setIsAuthenticated(true);\n      setUser(userData);\n      return {\n        success: true,\n        data: userData\n      };\n    } catch (err) {\n      setError(err.message || '프로필을 불러오는 중 오류가 발생했습니다.');\n      setIsAuthenticated(false);\n      setUser(null);\n      return {\n        success: false,\n        error: err.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    isAuthenticated,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    fetchUserProfile\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"Pe2RP2vOKfdW6RCWdgSRumfDY1M=\");\n_c = AuthProvider;\nexport default AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","isAuthenticated","setIsAuthenticated","user","setUser","loading","setLoading","error","setError","login","email","password","Promise","resolve","setTimeout","userData","id","name","balance","KRW","BTC","ETH","profileImage","success","err","message","logout","register","fetchUserProfile","data","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\n\n// 인증 컨텍스트 생성\nexport const AuthContext = createContext();\n\nexport const AuthProvider = ({ children }) => {\n  // 인증 상태\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  // 사용자 정보\n  const [user, setUser] = useState(null);\n  // 로딩 상태\n  const [loading, setLoading] = useState(false);\n  // 에러 상태\n  const [error, setError] = useState(null);\n\n  // 로그인\n  const login = async (email, password) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // 실제 API 호출 대신 시뮬레이션\n      // const response = await fetch('/api/auth/login', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify({ email, password })\n      // });\n      \n      // const data = await response.json();\n      \n      // if (!response.ok) {\n      //   throw new Error(data.message || '로그인에 실패했습니다.');\n      // }\n      \n      // 시뮬레이션을 위한 지연\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      // 예시 사용자 데이터\n      const userData = {\n        id: 'user123',\n        email: email,\n        name: '사용자',\n        balance: {\n          KRW: 1000000,\n          BTC: 0.05,\n          ETH: 0.5\n        },\n        profileImage: '/images/profile.png'\n      };\n      \n      // 상태 업데이트\n      setIsAuthenticated(true);\n      setUser(userData);\n      \n      // 토큰 저장 (실제 구현 시)\n      // localStorage.setItem('token', data.token);\n      \n      return { success: true };\n    } catch (err) {\n      setError(err.message || '로그인 중 오류가 발생했습니다.');\n      return { success: false, error: err.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 로그아웃\n  const logout = () => {\n    setIsAuthenticated(false);\n    setUser(null);\n    \n    // 토큰 제거 (실제 구현 시)\n    // localStorage.removeItem('token');\n    \n    return true;\n  };\n\n  // 회원가입\n  const register = async (email, password, name) => {\n    setLoading(true);\n    setError(null);\n    \n    try {\n      // 실제 API 호출 대신 시뮬레이션\n      // const response = await fetch('/api/auth/register', {\n      //   method: 'POST',\n      //   headers: {\n      //     'Content-Type': 'application/json'\n      //   },\n      //   body: JSON.stringify({ email, password, name })\n      // });\n      \n      // const data = await response.json();\n      \n      // if (!response.ok) {\n      //   throw new Error(data.message || '회원가입에 실패했습니다.');\n      // }\n      \n      // 시뮬레이션을 위한 지연\n      await new Promise(resolve => setTimeout(resolve, 1000));\n      \n      return { success: true };\n    } catch (err) {\n      setError(err.message || '회원가입 중 오류가 발생했습니다.');\n      return { success: false, error: err.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 사용자 정보 가져오기\n  const fetchUserProfile = async () => {\n    setLoading(true);\n    \n    try {\n      // 실제 API 호출 대신 시뮬레이션\n      // const token = localStorage.getItem('token');\n      \n      // if (!token) {\n      //   throw new Error('인증 토큰이 없습니다.');\n      // }\n      \n      // const response = await fetch('/api/auth/profile', {\n      //   headers: {\n      //     'Authorization': `Bearer ${token}`\n      //   }\n      // });\n      \n      // const data = await response.json();\n      \n      // if (!response.ok) {\n      //   throw new Error(data.message || '프로필을 불러오는데 실패했습니다.');\n      // }\n      \n      // 시뮬레이션을 위한 지연\n      await new Promise(resolve => setTimeout(resolve, 500));\n      \n      // 예시 사용자 데이터\n      const userData = {\n        id: 'user123',\n        email: 'user@example.com',\n        name: '사용자',\n        balance: {\n          KRW: 1000000,\n          BTC: 0.05,\n          ETH: 0.5\n        },\n        profileImage: '/images/profile.png'\n      };\n      \n      // 상태 업데이트\n      setIsAuthenticated(true);\n      setUser(userData);\n      \n      return { success: true, data: userData };\n    } catch (err) {\n      setError(err.message || '프로필을 불러오는 중 오류가 발생했습니다.');\n      setIsAuthenticated(false);\n      setUser(null);\n      \n      return { success: false, error: err.message };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    isAuthenticated,\n    user,\n    loading,\n    error,\n    login,\n    logout,\n    register,\n    fetchUserProfile\n  };\n\n  return (\n    <AuthContext.Provider value={contextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nexport default AuthProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}