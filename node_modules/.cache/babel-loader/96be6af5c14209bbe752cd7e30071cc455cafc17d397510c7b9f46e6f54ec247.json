{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/context/ThemeContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/context/ThemeContext.js\nimport React, { createContext, useState, useContext, useMemo, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThemeContext = /*#__PURE__*/createContext(undefined);\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  const [theme, setTheme] = useState(() => {\n    // 초기 테마를 localStorage에서 가져오거나 OS 설정을 따르거나 기본값(light)으로 설정\n    const savedTheme = localStorage.getItem('app-theme');\n    // const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    return savedTheme || /*(prefersDark ? 'dark' : 'light') ||*/'light';\n  });\n  const toggleTheme = () => {\n    setTheme(prevTheme => {\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\n      localStorage.setItem('app-theme', newTheme); // 변경된 테마를 localStorage에 저장\n      return newTheme;\n    });\n  };\n\n  // 테마가 변경될 때마다 body의 클래스를 업데이트하여 CSS에서 활용\n  useEffect(() => {\n    document.body.classList.remove('light', 'dark');\n    document.body.classList.add(theme);\n    console.log(`[ThemeContext] Theme changed to: ${theme}`);\n  }, [theme]);\n\n  // value 객체는 theme 상태가 변경될 때만 재생성되도록 useMemo 사용\n  const value = useMemo(() => ({\n    theme,\n    toggleTheme\n  }), [theme, toggleTheme]);\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 10\n  }, this);\n};\n_s(ThemeProvider, \"hLovNMHhuXMxkfqp/pu/ZuvBN3s=\");\n_c = ThemeProvider;\nexport const useTheme = () => {\n  _s2();\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n_s2(useTheme, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useMemo","useEffect","jsxDEV","_jsxDEV","ThemeContext","undefined","ThemeProvider","children","_s","theme","setTheme","savedTheme","localStorage","getItem","toggleTheme","prevTheme","newTheme","setItem","document","body","classList","remove","add","console","log","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useTheme","_s2","context","Error","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/context/ThemeContext.js"],"sourcesContent":["// src/context/ThemeContext.js\nimport React, { createContext, useState, useContext, useMemo, useEffect } from 'react';\n\nconst ThemeContext = createContext(undefined);\n\nexport const ThemeProvider = ({ children }) => {\n  const [theme, setTheme] = useState(() => {\n    // 초기 테마를 localStorage에서 가져오거나 OS 설정을 따르거나 기본값(light)으로 설정\n    const savedTheme = localStorage.getItem('app-theme');\n    // const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n    return savedTheme || /*(prefersDark ? 'dark' : 'light') ||*/ 'light';\n  });\n\n  const toggleTheme = () => {\n    setTheme(prevTheme => {\n      const newTheme = prevTheme === 'light' ? 'dark' : 'light';\n      localStorage.setItem('app-theme', newTheme); // 변경된 테마를 localStorage에 저장\n      return newTheme;\n    });\n  };\n\n  // 테마가 변경될 때마다 body의 클래스를 업데이트하여 CSS에서 활용\n  useEffect(() => {\n    document.body.classList.remove('light', 'dark');\n    document.body.classList.add(theme);\n    console.log(`[ThemeContext] Theme changed to: ${theme}`);\n  }, [theme]);\n\n  // value 객체는 theme 상태가 변경될 때만 재생성되도록 useMemo 사용\n  const value = useMemo(() => ({ theme, toggleTheme }), [theme, toggleTheme]);\n\n  return <ThemeContext.Provider value={value}>{children}</ThemeContext.Provider>;\n};\n\nexport const useTheme = () => {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n};\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,UAAU,EAAEC,OAAO,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvF,MAAMC,YAAY,gBAAGP,aAAa,CAACQ,SAAS,CAAC;AAE7C,OAAO,MAAMC,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,MAAM;IACvC;IACA,MAAMa,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;IACpD;IACA,OAAOF,UAAU,IAAI,uCAAwC,OAAO;EACtE,CAAC,CAAC;EAEF,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxBJ,QAAQ,CAACK,SAAS,IAAI;MACpB,MAAMC,QAAQ,GAAGD,SAAS,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;MACzDH,YAAY,CAACK,OAAO,CAAC,WAAW,EAAED,QAAQ,CAAC,CAAC,CAAC;MAC7C,OAAOA,QAAQ;IACjB,CAAC,CAAC;EACJ,CAAC;;EAED;EACAf,SAAS,CAAC,MAAM;IACdiB,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACC,MAAM,CAAC,OAAO,EAAE,MAAM,CAAC;IAC/CH,QAAQ,CAACC,IAAI,CAACC,SAAS,CAACE,GAAG,CAACb,KAAK,CAAC;IAClCc,OAAO,CAACC,GAAG,CAAC,oCAAoCf,KAAK,EAAE,CAAC;EAC1D,CAAC,EAAE,CAACA,KAAK,CAAC,CAAC;;EAEX;EACA,MAAMgB,KAAK,GAAGzB,OAAO,CAAC,OAAO;IAAES,KAAK;IAAEK;EAAY,CAAC,CAAC,EAAE,CAACL,KAAK,EAAEK,WAAW,CAAC,CAAC;EAE3E,oBAAOX,OAAA,CAACC,YAAY,CAACsB,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAlB,QAAA,EAAEA;EAAQ;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAwB,CAAC;AAChF,CAAC;AAACtB,EAAA,CA3BWF,aAAa;AAAAyB,EAAA,GAAbzB,aAAa;AA6B1B,OAAO,MAAM0B,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGnC,UAAU,CAACK,YAAY,CAAC;EACxC,IAAI8B,OAAO,KAAK7B,SAAS,EAAE;IACzB,MAAM,IAAI8B,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}