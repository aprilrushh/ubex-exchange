{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/context/MarketContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\n// 시장 데이터 관련 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MarketContext = /*#__PURE__*/createContext();\nexport const useMarket = () => {\n  _s();\n  const context = useContext(MarketContext);\n  if (!context) {\n    throw new Error('useMarket must be used within a MarketProvider');\n  }\n  return context;\n};\n_s(useMarket, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const MarketProvider = ({\n  children\n}) => {\n  _s2();\n  // 코인 리스트 상태\n  const [coinList, setCoinList] = useState([]);\n  // 현재 선택된 코인 정보\n  const [currentCoin, setCurrentCoin] = useState(null);\n  // 시장 데이터 (가격, 거래량 등)\n  const [marketData, setMarketData] = useState([{\n    symbol: 'BTC/KRW',\n    name: '비트코인',\n    market: 'KRW',\n    price: 144313000,\n    change: -0.45,\n    volume: 194600583627,\n    isFavorite: false\n  }, {\n    symbol: 'ETH/KRW',\n    name: '이더리움',\n    market: 'KRW',\n    price: 3474000,\n    change: -2.88,\n    volume: 392052000000,\n    isFavorite: false\n  }, {\n    symbol: 'XRP/KRW',\n    name: '리플',\n    market: 'KRW',\n    price: 3299,\n    change: -3.45,\n    volume: 593455000000,\n    isFavorite: false\n  }, {\n    symbol: 'SOL/KRW',\n    name: '솔라나',\n    market: 'KRW',\n    price: 241800,\n    change: -1.81,\n    volume: 164722000000,\n    isFavorite: true\n  }]);\n  // 차트 데이터\n  const [marketHistory, setMarketHistory] = useState([]);\n  // 로딩 상태\n  const [isLoading, setIsLoading] = useState(false);\n  // 에러 상태\n  const [error, setError] = useState(null);\n  // 사용자 잔액\n  const [userBalance, setUserBalance] = useState({\n    krw: 1000000,\n    // 예시 데이터\n    btc: 0.1,\n    eth: 1.5,\n    xrp: 1000,\n    doge: 10000\n  });\n  useEffect(() => {\n    // 임시 데이터\n    const dummyData = [{\n      symbol: 'BTC',\n      name: 'Bitcoin',\n      price: 50000,\n      change: 2.5\n    }, {\n      symbol: 'ETH',\n      name: 'Ethereum',\n      price: 3000,\n      change: -1.2\n    }, {\n      symbol: 'USDT',\n      name: 'Tether',\n      price: 1,\n      change: 0.1\n    }, {\n      symbol: 'BNB',\n      name: 'Binance Coin',\n      price: 400,\n      change: 3.7\n    }, {\n      symbol: 'SOL',\n      name: 'Solana',\n      price: 100,\n      change: -2.3\n    }, {\n      symbol: 'ADA',\n      name: 'Cardano',\n      price: 1.2,\n      change: 1.8\n    }];\n    setMarketData(dummyData);\n  }, []);\n\n  // 잔액 가져오기 함수\n  const getBalance = () => {\n    return userBalance;\n  };\n  const fetchMarketData = useCallback(async symbol => {\n    // 실제 구현에서는 API 호출\n    console.log('Fetching market data for:', symbol);\n  }, []);\n\n  // 코인 리스트 가져오기 (API 호출 대신 예시 데이터 사용)\n  const fetchCoinList = async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      // 실제 API 호출 구현 시 여기에 구현\n      // const response = await fetch('/api/coins');\n      // const data = await response.json();\n\n      // 예시 데이터\n      const exampleCoins = [{\n        id: 'btc',\n        symbol: 'BTC',\n        market: 'KRW',\n        koreanName: '비트코인',\n        englishName: 'Bitcoin',\n        price: 144313000,\n        changePercent24h: -0.45,\n        change24h: -651000,\n        volume24hKRW: 194601000000,\n        isFavorite: false\n      }, {\n        id: 'xrp',\n        symbol: 'XRP',\n        market: 'KRW',\n        koreanName: '리플',\n        englishName: 'Ripple',\n        price: 3299,\n        changePercent24h: -3.45,\n        change24h: -118,\n        volume24hKRW: 593455000000,\n        isFavorite: false\n      }, {\n        id: 'doge',\n        symbol: 'DOGE',\n        market: 'KRW',\n        koreanName: '도지코인',\n        englishName: 'Dogecoin',\n        price: 323.9,\n        changePercent24h: -6.63,\n        change24h: -23,\n        volume24hKRW: 546612000000,\n        isFavorite: false\n      }, {\n        id: 'eth',\n        symbol: 'ETH',\n        market: 'KRW',\n        koreanName: '이더리움',\n        englishName: 'Ethereum',\n        price: 3474000,\n        changePercent24h: -2.88,\n        change24h: -103000,\n        volume24hKRW: 392052000000,\n        isFavorite: false\n      }, {\n        id: 'kaito',\n        symbol: 'KAITO',\n        market: 'KRW',\n        koreanName: '카이토',\n        englishName: 'Kaito',\n        price: 2407,\n        changePercent24h: -8.83,\n        change24h: -233,\n        volume24hKRW: 286094000000,\n        isFavorite: true\n      }, {\n        id: 'move',\n        symbol: 'MOVE',\n        market: 'KRW',\n        koreanName: '무브먼트',\n        englishName: 'Movement',\n        price: 316.3,\n        changePercent24h: 10.52,\n        change24h: 30.1,\n        volume24hKRW: 258020000000,\n        isFavorite: false\n      }, {\n        id: 'layer',\n        symbol: 'LAYER',\n        market: 'KRW',\n        koreanName: '레이어',\n        englishName: 'Layer',\n        price: 1667,\n        changePercent24h: -5.07,\n        change24h: -89,\n        volume24hKRW: 190725000000,\n        isFavorite: false\n      }, {\n        id: 'sol',\n        symbol: 'SOL',\n        market: 'KRW',\n        koreanName: '솔라나',\n        englishName: 'Solana',\n        price: 241800,\n        changePercent24h: -1.81,\n        change24h: -4450,\n        volume24hKRW: 164722000000,\n        isFavorite: true\n      }];\n      setTimeout(() => {\n        setCoinList(exampleCoins);\n        setIsLoading(false);\n      }, 300); // 실제 API 딜레이 시뮬레이션\n    } catch (err) {\n      console.error('Coin list fetch error:', err);\n      setError('코인 목록을 불러오는 데 실패했습니다.');\n      setIsLoading(false);\n    }\n  };\n\n  // 즐겨찾기 토글\n  const toggleFavorite = coinId => {\n    setCoinList(prevList => prevList.map(coin => coin.id === coinId ? {\n      ...coin,\n      isFavorite: !coin.isFavorite\n    } : coin));\n  };\n\n  // 차트 데이터 생성 (예시)\n  const generateExampleChartData = (symbol = 'BTC/KRW') => {\n    const now = new Date();\n    const result = [];\n    const basePrice = symbol.includes('BTC') ? 144000000 : symbol.includes('ETH') ? 3470000 : symbol.includes('XRP') ? 3300 : symbol.includes('DOGE') ? 324 : 5000;\n    let prevClose = basePrice;\n    for (let i = 29; i >= 0; i--) {\n      const time = new Date(now.getTime() - i * 24 * 60 * 60 * 1000);\n      const randomFactor = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * randomFactor;\n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 1000 + 100);\n      result.push({\n        time: time.getTime() / 1000,\n        open,\n        high,\n        low,\n        close,\n        volume\n      });\n      prevClose = close;\n    }\n    return result;\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    coinList,\n    currentCoin,\n    setCurrentCoin,\n    marketData,\n    marketHistory,\n    isLoading,\n    error,\n    fetchMarketData,\n    fetchCoinList,\n    toggleFavorite,\n    getBalance\n  };\n  return /*#__PURE__*/_jsxDEV(MarketContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 278,\n    columnNumber: 5\n  }, this);\n};\n_s2(MarketProvider, \"8WA3qV7na6R++W8bDaSMGx7+8XA=\");\n_c = MarketProvider;\nvar _c;\n$RefreshReg$(_c, \"MarketProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","useCallback","jsxDEV","_jsxDEV","MarketContext","useMarket","_s","context","Error","MarketProvider","children","_s2","coinList","setCoinList","currentCoin","setCurrentCoin","marketData","setMarketData","symbol","name","market","price","change","volume","isFavorite","marketHistory","setMarketHistory","isLoading","setIsLoading","error","setError","userBalance","setUserBalance","krw","btc","eth","xrp","doge","dummyData","getBalance","fetchMarketData","console","log","fetchCoinList","exampleCoins","id","koreanName","englishName","changePercent24h","change24h","volume24hKRW","setTimeout","err","toggleFavorite","coinId","prevList","map","coin","generateExampleChartData","now","Date","result","basePrice","includes","prevClose","i","time","getTime","randomFactor","Math","random","open","close","round","high","max","low","min","push","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/context/MarketContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, useCallback } from 'react';\n\n// 시장 데이터 관련 컨텍스트 생성\nexport const MarketContext = createContext();\n\nexport const useMarket = () => {\n  const context = useContext(MarketContext);\n  if (!context) {\n    throw new Error('useMarket must be used within a MarketProvider');\n  }\n  return context;\n};\n\nexport const MarketProvider = ({ children }) => {\n  // 코인 리스트 상태\n  const [coinList, setCoinList] = useState([]);\n  // 현재 선택된 코인 정보\n  const [currentCoin, setCurrentCoin] = useState(null);\n  // 시장 데이터 (가격, 거래량 등)\n  const [marketData, setMarketData] = useState([\n    {\n      symbol: 'BTC/KRW',\n      name: '비트코인',\n      market: 'KRW',\n      price: 144313000,\n      change: -0.45,\n      volume: 194600583627,\n      isFavorite: false\n    },\n    {\n      symbol: 'ETH/KRW',\n      name: '이더리움',\n      market: 'KRW',\n      price: 3474000,\n      change: -2.88,\n      volume: 392052000000,\n      isFavorite: false\n    },\n    {\n      symbol: 'XRP/KRW',\n      name: '리플',\n      market: 'KRW',\n      price: 3299,\n      change: -3.45,\n      volume: 593455000000,\n      isFavorite: false\n    },\n    {\n      symbol: 'SOL/KRW',\n      name: '솔라나',\n      market: 'KRW',\n      price: 241800,\n      change: -1.81,\n      volume: 164722000000,\n      isFavorite: true\n    }\n  ]);\n  // 차트 데이터\n  const [marketHistory, setMarketHistory] = useState([]);\n  // 로딩 상태\n  const [isLoading, setIsLoading] = useState(false);\n  // 에러 상태\n  const [error, setError] = useState(null);\n  // 사용자 잔액\n  const [userBalance, setUserBalance] = useState({\n    krw: 1000000, // 예시 데이터\n    btc: 0.1,\n    eth: 1.5,\n    xrp: 1000,\n    doge: 10000\n  });\n\n  useEffect(() => {\n    // 임시 데이터\n    const dummyData = [\n      { symbol: 'BTC', name: 'Bitcoin', price: 50000, change: 2.5 },\n      { symbol: 'ETH', name: 'Ethereum', price: 3000, change: -1.2 },\n      { symbol: 'USDT', name: 'Tether', price: 1, change: 0.1 },\n      { symbol: 'BNB', name: 'Binance Coin', price: 400, change: 3.7 },\n      { symbol: 'SOL', name: 'Solana', price: 100, change: -2.3 },\n      { symbol: 'ADA', name: 'Cardano', price: 1.2, change: 1.8 },\n    ];\n    setMarketData(dummyData);\n  }, []);\n\n  // 잔액 가져오기 함수\n  const getBalance = () => {\n    return userBalance;\n  };\n\n  const fetchMarketData = useCallback(async (symbol) => {\n    // 실제 구현에서는 API 호출\n    console.log('Fetching market data for:', symbol);\n  }, []);\n\n  // 코인 리스트 가져오기 (API 호출 대신 예시 데이터 사용)\n  const fetchCoinList = async () => {\n    setIsLoading(true);\n    setError(null);\n    \n    try {\n      // 실제 API 호출 구현 시 여기에 구현\n      // const response = await fetch('/api/coins');\n      // const data = await response.json();\n      \n      // 예시 데이터\n      const exampleCoins = [\n        {\n          id: 'btc',\n          symbol: 'BTC',\n          market: 'KRW',\n          koreanName: '비트코인',\n          englishName: 'Bitcoin',\n          price: 144313000,\n          changePercent24h: -0.45,\n          change24h: -651000,\n          volume24hKRW: 194601000000,\n          isFavorite: false\n        },\n        {\n          id: 'xrp',\n          symbol: 'XRP',\n          market: 'KRW',\n          koreanName: '리플',\n          englishName: 'Ripple',\n          price: 3299,\n          changePercent24h: -3.45,\n          change24h: -118,\n          volume24hKRW: 593455000000,\n          isFavorite: false\n        },\n        {\n          id: 'doge',\n          symbol: 'DOGE',\n          market: 'KRW',\n          koreanName: '도지코인',\n          englishName: 'Dogecoin',\n          price: 323.9,\n          changePercent24h: -6.63,\n          change24h: -23,\n          volume24hKRW: 546612000000,\n          isFavorite: false\n        },\n        {\n          id: 'eth',\n          symbol: 'ETH',\n          market: 'KRW',\n          koreanName: '이더리움',\n          englishName: 'Ethereum',\n          price: 3474000,\n          changePercent24h: -2.88,\n          change24h: -103000,\n          volume24hKRW: 392052000000,\n          isFavorite: false\n        },\n        {\n          id: 'kaito',\n          symbol: 'KAITO',\n          market: 'KRW',\n          koreanName: '카이토',\n          englishName: 'Kaito',\n          price: 2407,\n          changePercent24h: -8.83,\n          change24h: -233,\n          volume24hKRW: 286094000000,\n          isFavorite: true\n        },\n        {\n          id: 'move',\n          symbol: 'MOVE',\n          market: 'KRW',\n          koreanName: '무브먼트',\n          englishName: 'Movement',\n          price: 316.3,\n          changePercent24h: 10.52,\n          change24h: 30.1,\n          volume24hKRW: 258020000000,\n          isFavorite: false\n        },\n        {\n          id: 'layer',\n          symbol: 'LAYER',\n          market: 'KRW',\n          koreanName: '레이어',\n          englishName: 'Layer',\n          price: 1667,\n          changePercent24h: -5.07,\n          change24h: -89,\n          volume24hKRW: 190725000000,\n          isFavorite: false\n        },\n        {\n          id: 'sol',\n          symbol: 'SOL',\n          market: 'KRW',\n          koreanName: '솔라나',\n          englishName: 'Solana',\n          price: 241800,\n          changePercent24h: -1.81,\n          change24h: -4450,\n          volume24hKRW: 164722000000,\n          isFavorite: true\n        }\n      ];\n      \n      setTimeout(() => {\n        setCoinList(exampleCoins);\n        setIsLoading(false);\n      }, 300); // 실제 API 딜레이 시뮬레이션\n    } catch (err) {\n      console.error('Coin list fetch error:', err);\n      setError('코인 목록을 불러오는 데 실패했습니다.');\n      setIsLoading(false);\n    }\n  };\n\n  // 즐겨찾기 토글\n  const toggleFavorite = (coinId) => {\n    setCoinList(prevList =>\n      prevList.map(coin =>\n        coin.id === coinId ? { ...coin, isFavorite: !coin.isFavorite } : coin\n      )\n    );\n  };\n\n  // 차트 데이터 생성 (예시)\n  const generateExampleChartData = (symbol = 'BTC/KRW') => {\n    const now = new Date();\n    const result = [];\n    const basePrice = symbol.includes('BTC') ? 144000000 : \n                     symbol.includes('ETH') ? 3470000 : \n                     symbol.includes('XRP') ? 3300 : \n                     symbol.includes('DOGE') ? 324 : 5000;\n    let prevClose = basePrice;\n    \n    for (let i = 29; i >= 0; i--) {\n      const time = new Date(now.getTime() - (i * 24 * 60 * 60 * 1000));\n      const randomFactor = Math.random() * 0.03 - 0.015; // -1.5% to +1.5%\n      const change = prevClose * randomFactor;\n      \n      const open = prevClose;\n      const close = Math.round(open + change);\n      const high = Math.round(Math.max(open, close) * (1 + Math.random() * 0.01));\n      const low = Math.round(Math.min(open, close) * (1 - Math.random() * 0.01));\n      const volume = Math.round(Math.random() * 1000 + 100);\n      \n      result.push({\n        time: time.getTime() / 1000,\n        open,\n        high,\n        low,\n        close,\n        volume\n      });\n      \n      prevClose = close;\n    }\n    \n    return result;\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    coinList,\n    currentCoin,\n    setCurrentCoin,\n    marketData,\n    marketHistory,\n    isLoading,\n    error,\n    fetchMarketData,\n    fetchCoinList,\n    toggleFavorite,\n    getBalance\n  };\n\n  return (\n    <MarketContext.Provider value={contextValue}>\n      {children}\n    </MarketContext.Provider>\n  );\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}