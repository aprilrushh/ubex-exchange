{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/context/OrderContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\n\n// 주문 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrderContext = /*#__PURE__*/createContext();\nexport const OrderProvider = ({\n  children\n}) => {\n  _s();\n  // 주문 내역 상태\n  const [orders, setOrders] = useState([]);\n  // 미체결 주문 상태\n  const [pendingOrders, setPendingOrders] = useState([]);\n  // 완료된 주문 상태\n  const [completedOrders, setCompletedOrders] = useState([]);\n\n  // 새 주문 생성\n  const createOrder = orderData => {\n    const newOrder = {\n      id: `order-${Date.now()}`,\n      status: 'pending',\n      // pending, completed, canceled\n      createdAt: new Date().toISOString(),\n      ...orderData\n    };\n\n    // 주문 목록에 추가\n    setOrders(prevOrders => [...prevOrders, newOrder]);\n\n    // 미체결 주문에 추가\n    setPendingOrders(prevPending => [...prevPending, newOrder]);\n\n    // 실제 애플리케이션에서는 여기서 API 호출\n    console.log('New order created:', newOrder);\n\n    // 시뮬레이션: 50% 확률로 5초 후 주문 체결\n    if (Math.random() > 0.5) {\n      setTimeout(() => {\n        completeOrder(newOrder.id);\n      }, 5000);\n    }\n    return newOrder;\n  };\n\n  // 주문 취소\n  const cancelOrder = orderId => {\n    // 주문 상태 업데이트\n    setOrders(prevOrders => prevOrders.map(order => order.id === orderId ? {\n      ...order,\n      status: 'canceled'\n    } : order));\n\n    // 미체결 주문에서 제거\n    setPendingOrders(prevPending => prevPending.filter(order => order.id !== orderId));\n\n    // 실제 애플리케이션에서는 여기서 API 호출\n    console.log('Order canceled:', orderId);\n  };\n\n  // 주문 체결\n  const completeOrder = orderId => {\n    // 주문 상태 업데이트\n    setOrders(prevOrders => prevOrders.map(order => order.id === orderId ? {\n      ...order,\n      status: 'completed'\n    } : order));\n\n    // 미체결 주문에서 제거하고 완료된 주문에 추가\n    setPendingOrders(prevPending => {\n      const completedOrder = prevPending.find(order => order.id === orderId);\n      if (completedOrder) {\n        setCompletedOrders(prevCompleted => [...prevCompleted, {\n          ...completedOrder,\n          status: 'completed'\n        }]);\n      }\n      return prevPending.filter(order => order.id !== orderId);\n    });\n\n    // 실제 애플리케이션에서는 여기서 API 호출\n    console.log('Order completed:', orderId);\n  };\n\n  // 주문 추가 (OrderForm에서 사용)\n  const addOrder = orderData => {\n    return createOrder(orderData);\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    orders,\n    pendingOrders,\n    completedOrders,\n    createOrder,\n    cancelOrder,\n    completeOrder,\n    addOrder\n  };\n  return /*#__PURE__*/_jsxDEV(OrderContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(OrderProvider, \"mvYoHoUtDqECYpK4AAL6IcMj++A=\");\n_c = OrderProvider;\nexport default OrderProvider;\nvar _c;\n$RefreshReg$(_c, \"OrderProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","OrderContext","OrderProvider","children","_s","orders","setOrders","pendingOrders","setPendingOrders","completedOrders","setCompletedOrders","createOrder","orderData","newOrder","id","Date","now","status","createdAt","toISOString","prevOrders","prevPending","console","log","Math","random","setTimeout","completeOrder","cancelOrder","orderId","map","order","filter","completedOrder","find","prevCompleted","addOrder","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/context/OrderContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\n\n// 주문 컨텍스트 생성\nexport const OrderContext = createContext();\n\nexport const OrderProvider = ({ children }) => {\n  // 주문 내역 상태\n  const [orders, setOrders] = useState([]);\n  // 미체결 주문 상태\n  const [pendingOrders, setPendingOrders] = useState([]);\n  // 완료된 주문 상태\n  const [completedOrders, setCompletedOrders] = useState([]);\n\n  // 새 주문 생성\n  const createOrder = (orderData) => {\n    const newOrder = {\n      id: `order-${Date.now()}`,\n      status: 'pending', // pending, completed, canceled\n      createdAt: new Date().toISOString(),\n      ...orderData\n    };\n\n    // 주문 목록에 추가\n    setOrders(prevOrders => [...prevOrders, newOrder]);\n    \n    // 미체결 주문에 추가\n    setPendingOrders(prevPending => [...prevPending, newOrder]);\n    \n    // 실제 애플리케이션에서는 여기서 API 호출\n    console.log('New order created:', newOrder);\n    \n    // 시뮬레이션: 50% 확률로 5초 후 주문 체결\n    if (Math.random() > 0.5) {\n      setTimeout(() => {\n        completeOrder(newOrder.id);\n      }, 5000);\n    }\n    \n    return newOrder;\n  };\n\n  // 주문 취소\n  const cancelOrder = (orderId) => {\n    // 주문 상태 업데이트\n    setOrders(prevOrders =>\n      prevOrders.map(order =>\n        order.id === orderId ? { ...order, status: 'canceled' } : order\n      )\n    );\n    \n    // 미체결 주문에서 제거\n    setPendingOrders(prevPending =>\n      prevPending.filter(order => order.id !== orderId)\n    );\n    \n    // 실제 애플리케이션에서는 여기서 API 호출\n    console.log('Order canceled:', orderId);\n  };\n\n  // 주문 체결\n  const completeOrder = (orderId) => {\n    // 주문 상태 업데이트\n    setOrders(prevOrders =>\n      prevOrders.map(order =>\n        order.id === orderId ? { ...order, status: 'completed' } : order\n      )\n    );\n    \n    // 미체결 주문에서 제거하고 완료된 주문에 추가\n    setPendingOrders(prevPending => {\n      const completedOrder = prevPending.find(order => order.id === orderId);\n      if (completedOrder) {\n        setCompletedOrders(prevCompleted => [...prevCompleted, { ...completedOrder, status: 'completed' }]);\n      }\n      return prevPending.filter(order => order.id !== orderId);\n    });\n    \n    // 실제 애플리케이션에서는 여기서 API 호출\n    console.log('Order completed:', orderId);\n  };\n\n  // 주문 추가 (OrderForm에서 사용)\n  const addOrder = (orderData) => {\n    return createOrder(orderData);\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    orders,\n    pendingOrders,\n    completedOrders,\n    createOrder,\n    cancelOrder,\n    completeOrder,\n    addOrder\n  };\n\n  return (\n    <OrderContext.Provider value={contextValue}>\n      {children}\n    </OrderContext.Provider>\n  );\n};\n\nexport default OrderProvider;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}