{"ast":null,"code":"var _jsxFileName = \"/Users/andylee/usdb-exchange1/src/context/ThemeContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useEffect } from 'react';\n\n// 테마 컨텍스트 생성\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ThemeContext = /*#__PURE__*/createContext();\nexport const ThemeProvider = ({\n  children\n}) => {\n  _s();\n  // 테마 상태 (light/dark)\n  const [theme, setTheme] = useState('light');\n\n  // 로컬 스토리지에서 테마 설정 불러오기 (초기화)\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setTheme(savedTheme);\n      applyTheme(savedTheme);\n    } else {\n      // 시스템 테마 감지\n      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const initialTheme = prefersDark ? 'dark' : 'light';\n      setTheme(initialTheme);\n      applyTheme(initialTheme);\n    }\n  }, []);\n\n  // 테마 전환 함수\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    applyTheme(newTheme);\n  };\n\n  // HTML 요소에 테마 적용\n  const applyTheme = theme => {\n    document.documentElement.setAttribute('data-theme', theme);\n    document.body.className = theme;\n\n    // 다크 모드일 때 메타 테마 색상 변경 (모바일 브라우저)\n    const metaThemeColor = document.querySelector('meta[name=theme-color]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', theme === 'dark' ? '#1e2233' : '#ffffff');\n    }\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    theme,\n    toggleTheme\n  };\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n};\n_s(ThemeProvider, \"Z8UCD9KudyQA62DCQ9e5cf9+m5k=\");\n_c = ThemeProvider;\nexport default ThemeProvider;\nvar _c;\n$RefreshReg$(_c, \"ThemeProvider\");","map":{"version":3,"names":["React","createContext","useState","useEffect","jsxDEV","_jsxDEV","ThemeContext","ThemeProvider","children","_s","theme","setTheme","savedTheme","localStorage","getItem","applyTheme","prefersDark","window","matchMedia","matches","initialTheme","toggleTheme","newTheme","setItem","document","documentElement","setAttribute","body","className","metaThemeColor","querySelector","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/andylee/usdb-exchange1/src/context/ThemeContext.js"],"sourcesContent":["import React, { createContext, useState, useEffect } from 'react';\n\n// 테마 컨텍스트 생성\nexport const ThemeContext = createContext();\n\nexport const ThemeProvider = ({ children }) => {\n  // 테마 상태 (light/dark)\n  const [theme, setTheme] = useState('light');\n\n  // 로컬 스토리지에서 테마 설정 불러오기 (초기화)\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme');\n    if (savedTheme) {\n      setTheme(savedTheme);\n      applyTheme(savedTheme);\n    } else {\n      // 시스템 테마 감지\n      const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n      const initialTheme = prefersDark ? 'dark' : 'light';\n      setTheme(initialTheme);\n      applyTheme(initialTheme);\n    }\n  }, []);\n\n  // 테마 전환 함수\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    applyTheme(newTheme);\n  };\n\n  // HTML 요소에 테마 적용\n  const applyTheme = (theme) => {\n    document.documentElement.setAttribute('data-theme', theme);\n    document.body.className = theme;\n    \n    // 다크 모드일 때 메타 테마 색상 변경 (모바일 브라우저)\n    const metaThemeColor = document.querySelector('meta[name=theme-color]');\n    if (metaThemeColor) {\n      metaThemeColor.setAttribute('content', theme === 'dark' ? '#1e2233' : '#ffffff');\n    }\n  };\n\n  // 컨텍스트 값\n  const contextValue = {\n    theme,\n    toggleTheme\n  };\n\n  return (\n    <ThemeContext.Provider value={contextValue}>\n      {children}\n    </ThemeContext.Provider>\n  );\n};\n\nexport default ThemeProvider;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;;AAEjE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,YAAY,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,aAAa,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC7C;EACA,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGT,QAAQ,CAAC,OAAO,CAAC;;EAE3C;EACAC,SAAS,CAAC,MAAM;IACd,MAAMS,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAChD,IAAIF,UAAU,EAAE;MACdD,QAAQ,CAACC,UAAU,CAAC;MACpBG,UAAU,CAACH,UAAU,CAAC;IACxB,CAAC,MAAM;MACL;MACA,MAAMI,WAAW,GAAGC,MAAM,CAACC,UAAU,IAAID,MAAM,CAACC,UAAU,CAAC,8BAA8B,CAAC,CAACC,OAAO;MAClG,MAAMC,YAAY,GAAGJ,WAAW,GAAG,MAAM,GAAG,OAAO;MACnDL,QAAQ,CAACS,YAAY,CAAC;MACtBL,UAAU,CAACK,YAAY,CAAC;IAC1B;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxB,MAAMC,QAAQ,GAAGZ,KAAK,KAAK,OAAO,GAAG,MAAM,GAAG,OAAO;IACrDC,QAAQ,CAACW,QAAQ,CAAC;IAClBT,YAAY,CAACU,OAAO,CAAC,OAAO,EAAED,QAAQ,CAAC;IACvCP,UAAU,CAACO,QAAQ,CAAC;EACtB,CAAC;;EAED;EACA,MAAMP,UAAU,GAAIL,KAAK,IAAK;IAC5Bc,QAAQ,CAACC,eAAe,CAACC,YAAY,CAAC,YAAY,EAAEhB,KAAK,CAAC;IAC1Dc,QAAQ,CAACG,IAAI,CAACC,SAAS,GAAGlB,KAAK;;IAE/B;IACA,MAAMmB,cAAc,GAAGL,QAAQ,CAACM,aAAa,CAAC,wBAAwB,CAAC;IACvE,IAAID,cAAc,EAAE;MAClBA,cAAc,CAACH,YAAY,CAAC,SAAS,EAAEhB,KAAK,KAAK,MAAM,GAAG,SAAS,GAAG,SAAS,CAAC;IAClF;EACF,CAAC;;EAED;EACA,MAAMqB,YAAY,GAAG;IACnBrB,KAAK;IACLW;EACF,CAAC;EAED,oBACEhB,OAAA,CAACC,YAAY,CAAC0B,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAvB,QAAA,EACxCA;EAAQ;IAAA0B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;AAAC5B,EAAA,CAlDWF,aAAa;AAAA+B,EAAA,GAAb/B,aAAa;AAoD1B,eAAeA,aAAa;AAAC,IAAA+B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}